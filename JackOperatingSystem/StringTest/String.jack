// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int actualLength;
    field Array strPointer;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let maxLength = 1;
        }

        let actualLength = 0;
        let strPointer = Array.new(maxLength);
        return this;
    }

    /** Disposes strPointer string. */
    method void dispose() {
        do Memory.deAlloc(strPointer);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return actualLength;
    }

    /** Returns the character at the j-th location of strPointer string. */
    method char charAt(int j) {
        return strPointer[j];
    }

    /** Sets the character at the j-th location of strPointer string to c. */
    method void setCharAt(int j, char c) {
        let strPointer[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let strPointer[actualLength] = c;
        let actualLength = actualLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let actualLength = actualLength - 1;
        let strPointer[actualLength] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value;
        var int len;
        var boolean isNegative;

        if (String.charAt(this, 0) = 45) {
            let len = 1;
            let isNegative = true;
        }

        while (len < actualLength) {
            let value = (value * 10) + (strPointer[len] - 48);
            let len = len + 1;
        }

        if (isNegative) {
            let value = -value;
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int quotient, modulo;
        var int strValue;
        var char ch;
        var int absVal;

        let actualLength = 0;
        
        if (val < 0) {
            do String.appendChar(this, 45);
        }

        let absVal = Math.abs(val);

        let quotient = absVal / 10;
        let modulo = absVal - (quotient * 10);

        let ch = modulo + 48;

        if (absVal > 10) {
            do String.setInt(this, quotient);
        }

        if ((strPointer[0] = 45) & (actualLength = 0)) {
            let actualLength = 1;
        }

        do String.appendChar(this, ch);

        return this;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
